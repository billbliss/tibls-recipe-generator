{
  "model": "gpt-4o",
  "temperature": 0.3,
  "tools": [
    {
      "type": "function",
      "function": {
        "name": "tiblsRecipe",
        "description": "Return a Tibls JSON object parsed from the input",
        "parameters": {
          "type": "object",
          "properties": {
            "@type": {
              "type": "string",
              "enum": [
                "application/tibls+json"
              ]
            },
            "itemListElement": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "@type": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "summary": {
                    "type": "string",
                    "description": "Concise 1 to 2 sentence summary of the recipe. Always generate one if missing, using page content or inferred context."
                  },
                  "ingredients": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "text": {
                          "type": "string"
                        },
                        "sectionHeader": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "text",
                        "sectionHeader"
                      ]
                    }
                  },
                  "steps": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "text": {
                          "type": "string"
                        },
                        "sectionHeader": {
                          "type": "string"
                        },
                        "time": {
                          "type": "integer"
                        },
                        "flipTime": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "text",
                        "sectionHeader"
                      ]
                    }
                  },
                  "prepTime": {
                    "type": "integer"
                  },
                  "cookTime": {
                    "type": "integer"
                  },
                  "totalTime": {
                    "type": "integer"
                  },
                  "servings": {
                    "type": "integer"
                  },
                  "calories": {
                    "type": "integer"
                  },
                  "urlSource": {
                    "type": "string"
                  },
                  "urlHost": {
                    "type": "string"
                  },
                  "notes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "text": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "text"
                      ]
                    }
                  }
                },
                "required": [
                  "@type",
                  "id",
                  "name",
                  "ingredients",
                  "steps",
                  "summary"
                ]
              }
            }
          },
          "required": [
            "@type",
            "itemListElement"
          ]
        }
      }
    }
  ],
  "tool_choice": {
    "type": "function",
    "function": {
      "name": "tiblsRecipe"
    }
  },
  "messages": [
    {
      "role": "system",
      "content": "# üìù Tibls Recipe Conversion Prompt\n\nConvert any provided recipe (from a URL, PDF, or image) into valid Tibls JSON as described below.\n\n---\n\n## ‚úÖ Required Behavior Summary\n- Always extract or generate all required Tibls fields.\n- Strictly validate output JSON against the Tibls schema.\n- Always include a concise `summary` for each recipe, generated if necessary.\n- If any field is missing or unclear, supplement from visible content or generate a suitable value and add a note to `notes[]`.\n\n---\n\n## üì• Step 1: Source Type Handling\n\n**If given a URL:**\n- Extract JSON-LD data (Schema.org `Recipe`) if available.\n- Prefer `og:image` (or `twitter:image`) as the recipe image if it's a clear food photo; otherwise, heuristically select a main food photo.\n- Parse structured data into Tibls JSON, supplementing missing fields from page content or metadata.\n- If summary or other required fields are missing, generate them and add a note to `notes[]`.\n\n**If given a PDF or image:**\n- Use OCR to extract text if needed.\n- Identify and segment: title, ingredients, instructions, time values, servings, and metadata.\n- Use a clear photo of the dish as `ogImageUrl` if present.\n- Always generate a `summary` (based on visible context or inferred tone) and include it.\n- Note any OCR ambiguity, handwritten notes, or extra metadata in `notes[]`.\n\n---\n\n## üì¶ Step 2: Tibls JSON Construction\n\nEach recipe object must include:\n- `@type`: `\"https://tibls.app/types/recipe\"`\n- `id`: Unique UUID string\n- `name`: Recipe title\n- `ingredients[]`: Array of ingredient objects\n- `steps[]`: Array of step objects\n- `summary`: Concise overview (always present)\n\n**Optional fields:**  \n`urlSource`, `urlHost`, `created`, `updated`, `lastCooked`, `lastQueued`, `cookCount`, `prepTime`, `cookTime`, `totalTime`, `servings`, `calories`, `ogImageUrl`, `notes[]`\n\n**Notes:**\n- If any required field is missing, extract or generate it and explain in `notes[]`.\n- If calorie count is missing, estimate it (see Step 3) and add a note.\n- Always include a `notes[]` entry for any inferred, estimated, or post-processed value.\n\n---\n\n## üßÆ Step 3: Calorie Estimation (If Needed)\n\nIf calories are not provided:\n1. Estimate total calories using typical values for raw ingredients.\n2. Group by ingredient type.\n3. Round to the nearest 100 kcal.\n4. Add a `calories` field and a note summarizing the estimate in `notes[]`.\n\n---\n\n## üë®‚Äçüç≥ Step 4: Ingredient Handling\n\nEach ingredient:\n```json\n{ \"text\": \"2 cups flour\", \"sectionHeader\": \"Dough\" }\n```\n- Always include `sectionHeader`; only the first in a group gets a value, others get `\"\"`.\n- Use original units, with alternates in parentheses if appropriate.\n\n---\n\n## üç≥ Step 5: Step Handling\n\nEach step:\n```json\n{ \"text\": \"Bake for 30 minutes at 350¬∞F.\", \"sectionHeader\": \"Bake\", \"time\": 1800 }\n```\n- Use `sectionHeader` only on the first step of a group.\n- If a step includes a time range, use the lower bound and add a note.\n- For per-side or flipping instructions with a total time, set `time` to the full duration and add `flipTime` (half of total, rounded).\n- Add a note to `notes[]` when `flipTime` is inferred.\n\n---\n\n## üìù Notes\n\nAlways include notes for:\n- JSON-LD usage and post-processing\n- Timing ranges or approximations\n- OCR or image scanning\n- Calorie estimation (if performed)\n- Any inferred, estimated, or supplemented field\n\nExample:\n```json\n\"notes\": [\n  { \"text\": \"Summary inferred from page content as none was provided.\" },\n  { \"text\": \"Time range of 35‚Äì45 minutes given; used 35 minutes.\" }\n]\n```\n\n---\n\n## ‚úÖ Final Validation\n\n- Ensure all required fields are present and valid per the Tibls JSON Schema.\n- Do not include `\"time\"` in a step unless it is meaningful.\n- All time fields: `prepTime`, `cookTime`, and `totalTime` in minutes (integers); step `time`/`flipTime` in seconds (integers).\n- No `null`, `undefined`, or placeholder values.\n- If any value is generated or inferred, explain in `notes[]`.\n- Output must be strictly valid JSON and fully conform to the schema."
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "https://www.foodandwine.com/recipes/grilled-cheese-corn-and-calabrian-chile"
        }
      ]
    }
  ]
}